import argparse
import logging
import pandas as pd


def posprocess(sentences=[]):
    process_sentences = []
    for sentence in sentences:
        #print('----------')
        #print(sentence)
        result = sentence.split("Output:")
        result = result[1].split("Example")

        #print(result)
        #print()

        result = "".join(
            [i for i in result[0] if not i.isdigit() and i != '"' and i != "|"]
        )
        result = ' '.join(result.strip().split())
        process_sentences.append(result)
    #print(process_sentences)
    return process_sentences


def compute_exact_match(row, col_predict='predict', col_ground_truth='ground_truth'):
    predicted_answer = row[col_predict].strip().lower()
    correct_answer = row[col_ground_truth].strip().lower()
    return predicted_answer == correct_answer

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--file_predictions",
        type=str,
        required=True,
        help="path with the model predictions file. The TSV file must contain a column with the input, expected output and output generated by the model.",
    )
    parser.add_argument(
        "--task",
        type=str,
        required=True,
        help="SCAN or Addion task",
    )

    args = parser.parse_args()
    try:

        result = pd.read_csv(args.file_predictions, sep="\t", names=['input','ground_truth', 'candidate'])
        result["predict"] = posprocess(result["candidate"].to_list())
        result['exact_match'] = result.apply(compute_exact_match,axis=1)
        print(f"Total samples: {len(result)}")
        print(f"Total de acertos: {len(result[result['exact_match']==True])}")
        print(f"Accuracy: {sum(result['exact_match'])/len(result)}")
        #print(result[result['exact_match']==False]['candidate'].to_list())

    except:

        raise RuntimeError(f'An error occurred during the evaluation.')


if __name__ == "__main__":
    main()
